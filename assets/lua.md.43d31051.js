import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.f1c0562b.js";const e="/assets/luaScriptEditor.d4777031.png",p="/assets/luaSBRule.7557c941.png",o="/assets/sbRuleRunLuaCode.b9f51952.png",F=JSON.parse('{"title":"Поддержка lua скриптов","description":"","frontmatter":{},"headers":[],"relativePath":"lua.md","filePath":"lua.md"}'),t={name:"lua.md"},c=l(`<h1 id="поддержка-lua-скриптов" tabindex="-1">Поддержка lua скриптов <a class="header-anchor" href="#поддержка-lua-скриптов" aria-label="Permalink to &quot;Поддержка lua скриптов&quot;">​</a></h1><h2 id="введение" tabindex="-1">Введение <a class="header-anchor" href="#введение" aria-label="Permalink to &quot;Введение&quot;">​</a></h2><p>Шлюз SLS самодостаточен и может обходиться без внешних систем управления Умным домом. Для реализации автоматизаций, он поддерживает скриптовый язык программирования <a href="https://ru.wikipedia.org/wiki/Lua" target="_blank" rel="noreferrer">LUA</a>. При разработке скриптов можно использовать функции как встроенные в прошивку шлюза, так и функции поддерживаемых шлюзом библиотек LUA. Текущая, поддерживаемая, версия <a href="https://www.lua.org/versions.html#5.4" target="_blank" rel="noreferrer">LUA 5.4.4</a> (с версии прошивки 2022.01.30d1).</p><hr><h2 id="соглашения" tabindex="-1">Соглашения <a class="header-anchor" href="#соглашения" aria-label="Permalink to &quot;Соглашения&quot;">​</a></h2><p>Немного о форматировании и названиях различных объектов шлюза.</p><p>Для работы с различными объектами используется формат кода типа <code>zigbee.getStatus()</code>. В терминологии LUA это выглядит как <code>библиотека.функция()</code>. Поэтому постараемся придерживаться подобного именования объектов SLS.</p><p>Форматирование текста:</p><ul><li>пункты меню: <em>File -&gt; Save</em></li><li>небольшие куски кода: <code>print(a)</code></li><li>многострочный код:</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> var </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(var)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> var </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(var)</span></span></code></pre></div><p>Описание синтаксиса:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(var1, var2[, var3])</span></span>
<span class="line"><span style="color:#6A737D;">-- Описание переменных, передаваемых в функцию и их тип</span></span>
<span class="line"><span style="color:#6A737D;">-- var1 - STR, переменная 1</span></span>
<span class="line"><span style="color:#6A737D;">-- var2 - INT, переменная 2</span></span>
<span class="line"><span style="color:#6A737D;">-- var3 - BOOL, переменная 3 (если в [квадратных] скобках, то передавать не обязательно)</span></span>
<span class="line"><span style="color:#6A737D;">-- описание результата</span></span>
<span class="line"><span style="color:#6A737D;">-- result - type, если функция что-то возвращает, описывается здесь</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(var1, var2[, var3])</span></span>
<span class="line"><span style="color:#6A737D;">-- Описание переменных, передаваемых в функцию и их тип</span></span>
<span class="line"><span style="color:#6A737D;">-- var1 - STR, переменная 1</span></span>
<span class="line"><span style="color:#6A737D;">-- var2 - INT, переменная 2</span></span>
<span class="line"><span style="color:#6A737D;">-- var3 - BOOL, переменная 3 (если в [квадратных] скобках, то передавать не обязательно)</span></span>
<span class="line"><span style="color:#6A737D;">-- описание результата</span></span>
<span class="line"><span style="color:#6A737D;">-- result - type, если функция что-то возвращает, описывается здесь</span></span></code></pre></div><hr><p>Примечания:</p><ul><li>draft - черновик или будет добавлено в будущем</li><li>deprecated - будет удалено в будущем</li></ul><hr><h2 id="асинхронное-программирование" tabindex="-1">Асинхронное программирование <a class="header-anchor" href="#асинхронное-программирование" aria-label="Permalink to &quot;Асинхронное программирование&quot;">​</a></h2><p>Немного о модели программирования для нашего шлюза. При проектировании алгоритмов лучше не использовать функции а-ля os.delay() и самописные аналоги, выполняющие паузы в работе сценария более 1 секунды. Вместо этого лучше проектировать вызовы кусков кода из разных скриптов.</p><p>Например, часто при включении света в техническом или проходном помещении, необходимо сделать паузу и свет выключить. Первое, что приходит в голову - это сделать паузу в теле текущего сценария. Но, правильнее передать управление другому скрипту или вызвать основной <a href="/lua_doc/luaMainDoorLight">рекурсивно</a>.<br> Об асинхронности в программировании можно почитать, например <a href="https://habr.com/ru/company/jugru/blog/446562" target="_blank" rel="noreferrer">здесь</a>.</p><hr><h2 id="примеры-кода" tabindex="-1">Примеры кода <a class="header-anchor" href="#примеры-кода" aria-label="Permalink to &quot;Примеры кода&quot;">​</a></h2><p>Все примеры скриптов собраны <a href="/samples">здесь</a></p><hr><h2 id="редактор-скриптов-и-отладка" tabindex="-1">Редактор скриптов и отладка <a class="header-anchor" href="#редактор-скриптов-и-отладка" aria-label="Permalink to &quot;Редактор скриптов и отладка&quot;">​</a></h2><p>Редактор скриптов, по совместительству с файловым менеджером предназначен для создания, удаления и редактирования файлов, в том числе и скриптов. Найти его можно в меню <em>Actions -&gt; Files</em> (в старых версиях прошивки <em>Actions -&gt; Scripts</em>). <img src="`+e+`" alt="lua Script Editor"> Редактор разделен на несколько областей:</p><ul><li>Меню, с кнопками: <ul><li><em>Toggle files</em> - скрыть / отобразить панель файлов</li><li><em>Save</em> - сохранить</li><li><em>Run</em> - запустить скрипт на исполнение</li><li><em>Clear output</em> - очистить панель вывода</li></ul></li><li>Панель <em>Files</em>. Позволяет управлять файлами: <ul><li>Создать - <em>New file</em></li><li>Удалить - значок корзины напротив имени каждого файла</li><li>Открыть на редактирование - каждый файл представляет собой ссылку, по которой файл открывается в панели редактора</li></ul></li><li>Панель редактора</li><li>Панель вывода - консоль для вывода результатов работы редактируемого скрипта</li></ul><p>Скриптовый <code>stdout</code> функции LUA <code>print()</code> выводит информацию на Панель вывода, а также в системный лог (меню <em>Log</em>) шлюза. Данную функцию удобно использовать для отладки.</p><p>Для разработки или отладки скрипта, необходимо создать новый файл или открыть существующий. Например, с именем <code>test.lua</code> и в него ввести код на языке LUA.</p><p>Отладка скриптов выполняется преимущественно в Редакторе скриптов SLS. Однако, некоторые пользовательские функции может быть удобнее разрабатывать во &quot;взрослых&quot; IDE. Например, нативный <a href="https://studio.zerobrane.com" target="_blank" rel="noreferrer">ZeroBrain Studio</a>, VS Code, Atom и других.</p><hr><h2 id="запуск-скриптов" tabindex="-1">Запуск скриптов <a class="header-anchor" href="#запуск-скриптов" aria-label="Permalink to &quot;Запуск скриптов&quot;">​</a></h2><p>В зависимости от задач, выполняемых той или иной автоматизацией, доступны несколько вариантов запуска скриптов:</p><ol><li><a href="/lua#скрипт-инициализации">из скрипта инициализации</a></li><li><a href="/lua#запуск-скрипта-при-изменении-состояния-устройства">при изменении состояния устройства</a></li><li><a href="/lua#запуск-скрипта-по-событию-изменения-объекта">по событию изменения объекта</a></li><li><a href="/lua#запуск-lua-скрипта-из-другого-скрипта">запуск из другого скрипта</a></li><li><a href="/http_api#скрипты-lua">с помощью HTTP API</a></li><li><a href="/timers">периодический запуск (Таймеры)</a></li><li>по подписке mqtt (в разработке).</li></ol><p>Также, в любом месте, где прописывается имя файла скрипта, возможно писать сразу код в таком формате:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;#code&#39;</span><span style="color:#E1E4E8;">, где code </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> тело скрипта</span></span>
<span class="line"><span style="color:#6A737D;">--Например:</span></span>
<span class="line"><span style="color:#E1E4E8;">scripts.</span><span style="color:#79B8FF;">setTimer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#zigbee.set(&quot;0x0123456789012345&quot;, &quot;state&quot;, &quot;ON&quot;)&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ку&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;#code&#39;</span><span style="color:#24292E;">, где code </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> тело скрипта</span></span>
<span class="line"><span style="color:#6A737D;">--Например:</span></span>
<span class="line"><span style="color:#24292E;">scripts.</span><span style="color:#005CC5;">setTimer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#zigbee.set(&quot;0x0123456789012345&quot;, &quot;state&quot;, &quot;ON&quot;)&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ку&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="скрипт-инициализации" tabindex="-1">Скрипт инициализации <a class="header-anchor" href="#скрипт-инициализации" aria-label="Permalink to &quot;Скрипт инициализации&quot;">​</a></h3><p>При запуске системы выполняется скрипт инициализации <code>init.lua</code>, если он есть. Перед началом работы со скриптами, рекомендуется проверить его наличие рядом со всеми остальными скриптами <code>*.lua</code>. Если файла нет, то его нужно в редакторе скриптов. В <code>init.lua</code> полезно инициализировать переменные для работы с устройством, а также выполнить какие либо действия. <a href="/samples#скрипт-инициализации">Например:</a></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- init.lua --</span></span>
<span class="line"><span style="color:#6A737D;">-- Уведомление в Telegram о старте шлюза --</span></span>
<span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">settoken</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;51778***5:AAG0bvK***&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">setchat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-3348***&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SLS загружен!!!&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- init.lua --</span></span>
<span class="line"><span style="color:#6A737D;">-- Уведомление в Telegram о старте шлюза --</span></span>
<span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">settoken</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;51778***5:AAG0bvK***&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">setchat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-3348***&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SLS загружен!!!&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><hr><h3 id="запуск-скрипта-при-изменении-состояния-устроиства" tabindex="-1">Запуск скрипта при изменении состояния устройства <a class="header-anchor" href="#запуск-скрипта-при-изменении-состояния-устроиства" aria-label="Permalink to &quot;Запуск скрипта при изменении состояния устройства&quot;">​</a></h3><p>Скрипт можно запускать как одно из правил <a href="/simplebind">SimpleBind</a>.</p><p>Синтаксис: <code>scriptname.lua[,Param]</code></p><p>Например, так может выглядеть запись SB Rule для датчика открытия <img src="`+p+'" alt="SB Rule"></p><ul><li><code>mainDoorOnLight.lua</code> - имя запускаемого скрипта</li><li><code>Param</code> - необязательный параметр, через который в скрипт можно передать необходимые аргументы. Принимается он в скрипте через Событие <code>Event.Param</code> Аргументов может быть несколько. В данном примере передается 3 аргумента, разделенные символом <code>:</code>: целевое устройство, которым должен управлять датчик по сработке; контролируемый статус; задержка управляющего действия. Если аргументы не прописывать, то при изменении условий, придется менять эти значения в теле скрипта. Пример похожего скрипта <a href="/lua_doc/luaMainDoorLight">здесь</a></li></ul><p>Также, в Simple Bind можно запускать текст скрипта: <img src="'+o+`" alt="SB Rule Run Lua Code"></p><hr><h3 id="запуск-скрипта-по-событию-изменения-объекта" tabindex="-1">Запуск скрипта по событию изменения объекта <a class="header-anchor" href="#запуск-скрипта-по-событию-изменения-объекта" aria-label="Permalink to &quot;Запуск скрипта по событию изменения объекта&quot;">​</a></h3><p>Привязка к объекту скрипта: <a href="/objects#objsetscript">obj.setScript()</a></p><hr><h3 id="запуск-lua-скрипта-из-другого-скрипта" tabindex="-1">Запуск LUA скрипта из другого скрипта <a class="header-anchor" href="#запуск-lua-скрипта-из-другого-скрипта" aria-label="Permalink to &quot;Запуск LUA скрипта из другого скрипта&quot;">​</a></h3><h4 id="dofile" tabindex="-1">dofile() <a class="header-anchor" href="#dofile" aria-label="Permalink to &quot;dofile()&quot;">​</a></h4><p>Выполняет текст скрипта в контексте текущего.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">dofile</span><span style="color:#E1E4E8;">(scriptPath)</span></span>
<span class="line"><span style="color:#6A737D;">-- scriptPath - STR, путь к запускаемому скрипту вида &quot;/int/script.lua&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">dofile</span><span style="color:#24292E;">(scriptPath)</span></span>
<span class="line"><span style="color:#6A737D;">-- scriptPath - STR, путь к запускаемому скрипту вида &quot;/int/script.lua&quot;</span></span></code></pre></div><h4 id="scripts-run" tabindex="-1">scripts.run() <a class="header-anchor" href="#scripts-run" aria-label="Permalink to &quot;scripts.run()&quot;">​</a></h4><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scripts.</span><span style="color:#79B8FF;">run</span><span style="color:#E1E4E8;">(script[, Param])</span></span>
<span class="line"><span style="color:#6A737D;">-- script - STR, имя файла скрипта, без расширения \`lua\`</span></span>
<span class="line"><span style="color:#6A737D;">-- Param - STR, аргументы, передаваемые в скрипт</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scripts.</span><span style="color:#005CC5;">run</span><span style="color:#24292E;">(script[, Param])</span></span>
<span class="line"><span style="color:#6A737D;">-- script - STR, имя файла скрипта, без расширения \`lua\`</span></span>
<span class="line"><span style="color:#6A737D;">-- Param - STR, аргументы, передаваемые в скрипт</span></span></code></pre></div><hr><h2 id="библиотеки-sls" tabindex="-1">Библиотеки SLS <a class="header-anchor" href="#библиотеки-sls" aria-label="Permalink to &quot;Библиотеки SLS&quot;">​</a></h2><p>В прошивку шлюза встроены следующие библиотеки:</p><ul><li><a href="/objects#lua">obj.</a> - работа с объектами</li><li><a href="/lua#Библиотека-event">Event.</a> - работа с событиями</li><li><a href="/lua#библиотека-zigbee">zigbee.</a> - управление zigbee устройствами</li><li><a href="/lua#библиотека-mqtt">mqtt.</a> - работа с MQTT брокером</li><li><a href="/lua#библиотека-http">http.</a> - взаимодействие с внешними системами по HTTP</li><li><a href="/lua#библиотека-telegram">telegram.</a> - отправка уведомлений и управление шлюзом. <a href="/telegram">Подробнее здесь</a></li><li><a href="/lua#Библиотека-os">os.</a> - взаимодействие с операционной системой шлюза. <a href="/storage">Работа с хранилищем</a></li><li><a href="/lua#Библиотека-GPIO">gpio.</a> - управление GPIO</li><li><a href="/lua#Библиотека-audio">audio.</a> - управление встроенным в шлюза звуком</li><li><a href="/lua#Библиотека-net">net.</a> - получение IP адресов шлюза</li><li><a href="/lua#Библиотека-yeelight">yeelight.</a> - управление устройствами Yeelight</li><li><a href="/lua#Библиотека-cloud">cloud.</a> - работа с облаком SLS <code>cloud.slsys.io</code></li></ul><p><a href="/samples">Примеры использования</a>.</p><h3 id="библиотека-event" tabindex="-1">Библиотека EVENT <a class="header-anchor" href="#библиотека-event" aria-label="Permalink to &quot;Библиотека EVENT&quot;">​</a></h3><p>Библиотека <code>Event</code> служит для передачи данных в скрипт, в зависимости от того, из какой подсистемы он вызван.</p><h3 id="типы-событии" tabindex="-1">Типы событий <a class="header-anchor" href="#типы-событии" aria-label="Permalink to &quot;Типы событий&quot;">​</a></h3><p>События различаются типом <code>Event.Type</code>. В скрипт передается числовое значение типа события, позволяющее определить источник вызова и получить различные параметры:</p><ol><li><a href="/lua#Вызов-из-SB-Rule">Вызов по изменению состояния привязанного сенсора</a>. Правило Simple Bind. <code>SCRIPT_EVENT_TYPE_STATE_UPDATE</code></li><li><a href="/objects#lua">Вызов по изменению объекта</a>. <code>SCRIPT_EVENT_TYPE_OBJ_CHANGE</code></li><li><a href="/telegram">Вызов по входящему сообщению Telegram</a> <code>SCRIPT_EVENT_TYPE_TLG_MESSAGE</code></li><li><a href="/lua#Вызов-по-однократному-таймеру">Таймер однократный.</a> <code>SCRIPT_EVENT_TYPE_TIMEOUT</code></li><li><a href="/lua#Вызов-по-периодическому-таймеру">Таймер периодический.</a> <code>SCRIPT_EVENT_TYPE_INTERVAL</code></li><li><a href="/lua#Вызов-по-таймеру-Cron">Таймер Cron.</a> <code>SCRIPT_EVENT_TYPE_CRON</code></li><li><a href="/lua#scriptsrun">Вызов из LUA командой scripts.run()</a> <code>SCRIPT_EVENT_TYPE_RUN</code></li></ol><h3 id="своиства-событии" tabindex="-1">Свойства событий <a class="header-anchor" href="#своиства-событии" aria-label="Permalink to &quot;Свойства событий&quot;">​</a></h3><p>Для всех типов событий передаются следующие свойства:</p><ul><li><code>Event.Type</code> - тип события INT</li><li><code>Event.Name</code> - имя файла вызванного скрипта с расширением</li><li><code>Event.Time</code> - время вызова скрипта <code>table(sec, min, hour, day, wday, month, year)</code>.</li></ul><h4 id="вызов-из-sb-rule" tabindex="-1">Вызов из SB Rule <a class="header-anchor" href="#вызов-из-sb-rule" aria-label="Permalink to &quot;Вызов из SB Rule&quot;">​</a></h4><ul><li><code>Event.Param</code> - аргументы</li><li><code>Event.nwkAddr</code> - nwkAddr вызывающего устройства</li><li><code>Event.ieeeAddr</code> - ieeeAddr вызывающего устройства</li><li><code>Event.ModelId</code> - ModelId вызывающего устройства</li><li><code>Event.FriendlyName</code> - FriendlyName вызывающего устройства</li><li><code>Event.State.Name</code> - имя вызывающего &quot;состояния&quot;</li><li><code>Event.State.Value</code> - текущее значение &quot;состояния&quot;</li><li><code>Event.State.OldValue</code> - предыдущее значение &quot;состояния&quot;</li></ul><h4 id="вызов-по-однократному-таимеру" tabindex="-1">Вызов по однократному таймеру <a class="header-anchor" href="#вызов-по-однократному-таимеру" aria-label="Permalink to &quot;Вызов по однократному таймеру&quot;">​</a></h4><ul><li><code>Event.Param</code> - аргументы</li></ul><h4 id="вызов-по-периодическому-таимеру" tabindex="-1">Вызов по периодическому таймеру <a class="header-anchor" href="#вызов-по-периодическому-таимеру" aria-label="Permalink to &quot;Вызов по периодическому таймеру&quot;">​</a></h4><ul><li><code>Event.Param</code> - аргументы</li></ul><h4 id="вызов-по-таимеру-cron" tabindex="-1">Вызов по таймеру Cron <a class="header-anchor" href="#вызов-по-таимеру-cron" aria-label="Permalink to &quot;Вызов по таймеру Cron&quot;">​</a></h4><ul><li><code>Event.Param</code> - аргументы</li></ul><hr><h3 id="библиотека-zigbee" tabindex="-1">Библиотека ZIGBEE <a class="header-anchor" href="#библиотека-zigbee" aria-label="Permalink to &quot;Библиотека ZIGBEE&quot;">​</a></h3><p>Служит для управления zigbee устройствами, зарегистрированными на шлюзе. Подробные примеры <a href="/samples#zigbee">здесь</a></p><h4 id="zigbee-getstatus" tabindex="-1">zigbee.getStatus() <a class="header-anchor" href="#zigbee-getstatus" aria-label="Permalink to &quot;zigbee.getStatus()&quot;">​</a></h4><p>Возвращает статус координатора. Если запущен, вернёт 9. Начиная с версии 2022.07.24d1.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">coord_status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zigbee.</span><span style="color:#79B8FF;">getStatus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- coord_status - INT, статус zigbee координатора. 9 - OK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">coord_status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zigbee.</span><span style="color:#005CC5;">getStatus</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- coord_status - INT, статус zigbee координатора. 9 - OK</span></span></code></pre></div><h4 id="zigbee-join" tabindex="-1">zigbee.join() <a class="header-anchor" href="#zigbee-join" aria-label="Permalink to &quot;zigbee.join()&quot;">​</a></h4><p>Включает режим сопряжения для подключения новых устройств</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">join</span><span style="color:#E1E4E8;">(duration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">[, router])</span></span>
<span class="line"><span style="color:#6A737D;">-- duration - INT, время в секундах, на которое включить Join</span></span>
<span class="line"><span style="color:#6A737D;">-- router - STR, FriendlyName, ieeeAddr или nwkAddr устройства - роутера. Если опустить этот параметр, сопряжение будет открыто для всей сети</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">join</span><span style="color:#24292E;">(duration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">255</span><span style="color:#24292E;">[, router])</span></span>
<span class="line"><span style="color:#6A737D;">-- duration - INT, время в секундах, на которое включить Join</span></span>
<span class="line"><span style="color:#6A737D;">-- router - STR, FriendlyName, ieeeAddr или nwkAddr устройства - роутера. Если опустить этот параметр, сопряжение будет открыто для всей сети</span></span></code></pre></div><h4 id="zigbee-value" tabindex="-1">zigbee.value() <a class="header-anchor" href="#zigbee-value" aria-label="Permalink to &quot;zigbee.value()&quot;">​</a></h4><p>Возвращает значения состояния устройства из кэша</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zigbee.</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;">(device, state)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- state - STR, состояние, значение которого необходимо получить</span></span>
<span class="line"><span style="color:#6A737D;">-- result - значение состояния</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zigbee.</span><span style="color:#005CC5;">value</span><span style="color:#24292E;">(device, state)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- state - STR, состояние, значение которого необходимо получить</span></span>
<span class="line"><span style="color:#6A737D;">-- result - значение состояния</span></span></code></pre></div><h4 id="zigbee-get" tabindex="-1">zigbee.get() <a class="header-anchor" href="#zigbee-get" aria-label="Permalink to &quot;zigbee.get()&quot;">​</a></h4><p>Вызывает функцию GET в конвертере. Возвращает <code>true</code> в случае успеха.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zigbee.</span><span style="color:#79B8FF;">get</span><span style="color:#E1E4E8;">(device, state)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- state - STR, состояние, значение которого необходимо получить</span></span>
<span class="line"><span style="color:#6A737D;">-- result - BOOL, true - успех, false - вероятно в конвертере нет команды GET</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zigbee.</span><span style="color:#005CC5;">get</span><span style="color:#24292E;">(device, state)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- state - STR, состояние, значение которого необходимо получить</span></span>
<span class="line"><span style="color:#6A737D;">-- result - BOOL, true - успех, false - вероятно в конвертере нет команды GET</span></span></code></pre></div><h4 id="zigbee-set" tabindex="-1">zigbee.set() <a class="header-anchor" href="#zigbee-set" aria-label="Permalink to &quot;zigbee.set()&quot;">​</a></h4><p>Устанавливает значение состояния устройства</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zigbee.</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(device, stateName, stateValue)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- stateName - STR, имя состояния, значение которого необходимо изменить</span></span>
<span class="line"><span style="color:#6A737D;">-- stateValue - значение состояние. Тип - свой для каждого значения. Например, для кнопки State:Action тип будет STR, а для яркости State:brightness тип будет INT</span></span>
<span class="line"><span style="color:#6A737D;">-- result - NIL - устройство не найдено, BOOL, true - успех, false - ошибка в имени состояния и/или его значении</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zigbee.</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(device, stateName, stateValue)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- stateName - STR, имя состояния, значение которого необходимо изменить</span></span>
<span class="line"><span style="color:#6A737D;">-- stateValue - значение состояние. Тип - свой для каждого значения. Например, для кнопки State:Action тип будет STR, а для яркости State:brightness тип будет INT</span></span>
<span class="line"><span style="color:#6A737D;">-- result - NIL - устройство не найдено, BOOL, true - успех, false - ошибка в имени состояния и/или его значении</span></span></code></pre></div><h4 id="zigbee-setstate" tabindex="-1">zigbee.setState() <a class="header-anchor" href="#zigbee-setstate" aria-label="Permalink to &quot;zigbee.setState()&quot;">​</a></h4><p>Устанавливает значение состояния устройства. Можно указать тип значения (по умолчанию STR) и необходимо ли выполнять события (с версии 2022.07.24d1, по умолчанию true) . В отличие от <code>zigbee.set()</code> позволяет создавать свои состояния, виртуальные. <a href="/samples#Преобразование-показателей-давления-из-kPa-в-mmhg">Например</a>, для хранения данных какого-либо состояния, в альтернативных единицах измерения. Также <code>zigbee.set()</code> не позволяет изменять виртуальные состояния.</p><p>При создании состояния желательно выполнить os.save()</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zigbee.</span><span style="color:#79B8FF;">setState</span><span style="color:#E1E4E8;">(device, stateName, </span><span style="color:#79B8FF;">stateValue</span><span style="color:#9ECBFF;">[[, type], events])</span></span>
<span class="line"><span style="color:#9ECBFF;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#9ECBFF;">-- stateName - STR, имя состояния, значение которого необходимо изменить</span></span>
<span class="line"><span style="color:#9ECBFF;">-- stateValue - значение состояние</span></span>
<span class="line"><span style="color:#9ECBFF;">-- type - STR, тип значений состояния</span></span>
<span class="line"><span style="color:#9ECBFF;">-- events - BOOL, выполнять события (по умолчанию true)</span></span>
<span class="line"><span style="color:#9ECBFF;">-- result - BOOL,  true - успех, false - устройство не найдено</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zigbee.</span><span style="color:#005CC5;">setState</span><span style="color:#24292E;">(device, stateName, </span><span style="color:#005CC5;">stateValue</span><span style="color:#032F62;">[[, type], events])</span></span>
<span class="line"><span style="color:#032F62;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#032F62;">-- stateName - STR, имя состояния, значение которого необходимо изменить</span></span>
<span class="line"><span style="color:#032F62;">-- stateValue - значение состояние</span></span>
<span class="line"><span style="color:#032F62;">-- type - STR, тип значений состояния</span></span>
<span class="line"><span style="color:#032F62;">-- events - BOOL, выполнять события (по умолчанию true)</span></span>
<span class="line"><span style="color:#032F62;">-- result - BOOL,  true - успех, false - устройство не найдено</span></span></code></pre></div><h5 id="как-удалить-виртуальное-состояние" tabindex="-1">Как удалить виртуальное состояние <a class="header-anchor" href="#как-удалить-виртуальное-состояние" aria-label="Permalink to &quot;Как удалить виртуальное состояние&quot;">​</a></h5><p>Вариант 1</p><ul><li>обнулить конвертер: кнопка <code>Reload converter Id</code> на вкладке <code>Info</code> устройства</li><li>выполнить <code>Action -&gt; Save</code> 2 раза для удаления из <code>devices.json</code> и <code>devices.json.bak</code> (устройства сохраняются 2 раза в час автоматически, поэтому если произойдет рестарт по питанию ранее 30 минут, то состояние не будет удалено)</li></ul><p>Выриант 2</p><ul><li>удалить из <code>devices.json</code> и <code>devices.json.bak</code> и перезагрузить шлюз по питанию</li></ul><p>Пример с состоянием <code>test</code></p><p>До:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;st&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;backlight_mode&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;child_lock&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;current&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;last_seen&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1699669806</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;linkquality&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;power&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;power_on_behavior&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;state&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;trSeqNum&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;voltage&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">225</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;st&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;backlight_mode&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OFF&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;child_lock&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;current&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;last_seen&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1699669806</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;linkquality&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">127</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;power&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;power_on_behavior&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OFF&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;state&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OFF&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;test&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;trSeqNum&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">150</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;voltage&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">225</span></span></code></pre></div><p>После:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;st&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;backlight_mode&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;child_lock&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;current&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;last_seen&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1699669806</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;linkquality&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">127</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;power&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;power_on_behavior&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;state&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;trSeqNum&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;voltage&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">225</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;st&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;backlight_mode&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OFF&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;child_lock&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;current&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;last_seen&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1699669806</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;linkquality&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">127</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;power&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;power_on_behavior&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OFF&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;state&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;OFF&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;trSeqNum&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">150</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;voltage&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">225</span></span></code></pre></div><h4 id="zigbee-setmodel" tabindex="-1">zigbee.setModel() <a class="header-anchor" href="#zigbee-setmodel" aria-label="Permalink to &quot;zigbee.setModel()&quot;">​</a></h4><p>Программное переназначение типа устройства.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">setModel</span><span style="color:#E1E4E8;">(device, ModelId)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- ModelId - STR, ModelId устройства, которое поддерживается шлюзом.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">setModel</span><span style="color:#24292E;">(device, ModelId)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- ModelId - STR, ModelId устройства, которое поддерживается шлюзом.</span></span></code></pre></div><p>В некоторых случаях протокол взаимодействия новых устройств совпадает с теми, что уже поддерживаются шлюзом SLS. В таком случае можно при загрузке шлюза подменять идентификаторы, добавив в init.lua код:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">setModel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xBox&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ptvo.switch&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">setModel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xBox&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ptvo.switch&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>Данный функционал будет полезен пользователям генератора прошивок ptvo, кто самостоятельно изменит имя устройства на кастомное.</strong></p><h4 id="zigbee-readattr-draft" tabindex="-1">zigbee.readAttr() - draft <a class="header-anchor" href="#zigbee-readattr-draft" aria-label="Permalink to &quot;zigbee.readAttr() - draft&quot;">​</a></h4><p>Отправляет запрос на чтение атрибута в кластере.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">readAttr</span><span style="color:#E1E4E8;">(device, epId, clusterId, AttrId[, manufId])</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- epID - INT, номер эндпоинта</span></span>
<span class="line"><span style="color:#6A737D;">-- clusterID - INT, номер кластера</span></span>
<span class="line"><span style="color:#6A737D;">-- AttrId - INT, номер атрибута</span></span>
<span class="line"><span style="color:#6A737D;">-- Например, вернуть атрибут swBuild в кластере genBasic в 1 эндпоинте:</span></span>
<span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">readAttr</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0x90FD9FFFFEF7E26D&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x4000</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x0000</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">readAttr</span><span style="color:#24292E;">(device, epId, clusterId, AttrId[, manufId])</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- epID - INT, номер эндпоинта</span></span>
<span class="line"><span style="color:#6A737D;">-- clusterID - INT, номер кластера</span></span>
<span class="line"><span style="color:#6A737D;">-- AttrId - INT, номер атрибута</span></span>
<span class="line"><span style="color:#6A737D;">-- Например, вернуть атрибут swBuild в кластере genBasic в 1 эндпоинте:</span></span>
<span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">readAttr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0x90FD9FFFFEF7E26D&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x4000</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x0000</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="zigbee-writeattr-draft" tabindex="-1">zigbee.writeAttr() - draft <a class="header-anchor" href="#zigbee-writeattr-draft" aria-label="Permalink to &quot;zigbee.writeAttr() - draft&quot;">​</a></h4><p>Записывает значение атрибута в кластере.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">writeAttr</span><span style="color:#E1E4E8;">(device, epId, clusterId, AttrId, dataType, value[, manufId])</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- epID - INT, номер эндпоинта</span></span>
<span class="line"><span style="color:#6A737D;">-- clusterID - INT, номер кластера</span></span>
<span class="line"><span style="color:#6A737D;">-- AttrId - INT, номер атрибута</span></span>
<span class="line"><span style="color:#6A737D;">-- dataType - INT, тип данных. Например UINT8 - это 0x20</span></span>
<span class="line"><span style="color:#6A737D;">-- value - значение атрибута</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">writeAttr</span><span style="color:#24292E;">(device, epId, clusterId, AttrId, dataType, value[, manufId])</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- epID - INT, номер эндпоинта</span></span>
<span class="line"><span style="color:#6A737D;">-- clusterID - INT, номер кластера</span></span>
<span class="line"><span style="color:#6A737D;">-- AttrId - INT, номер атрибута</span></span>
<span class="line"><span style="color:#6A737D;">-- dataType - INT, тип данных. Например UINT8 - это 0x20</span></span>
<span class="line"><span style="color:#6A737D;">-- value - значение атрибута</span></span></code></pre></div><h4 id="zigbee-configreport-draft" tabindex="-1">zigbee.configReport() - draft <a class="header-anchor" href="#zigbee-configreport-draft" aria-label="Permalink to &quot;zigbee.configReport() - draft&quot;">​</a></h4><p>Конфигурирует репортинг атрибута в кластере.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">configReport</span><span style="color:#E1E4E8;">(device, epId, clusterId, AttrId, dataType, minRepInt, maxRepInt, repChange)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- epID - INT, номер эндпоинта</span></span>
<span class="line"><span style="color:#6A737D;">-- clusterID - INT, номер кластера. Например GEN_POWER_CFG - это 0x0001</span></span>
<span class="line"><span style="color:#6A737D;">-- AttrId - INT, номер атрибута. Например BatteryVoltage - это 0x0020</span></span>
<span class="line"><span style="color:#6A737D;">-- dataType - INT, тип данных. Например UINT8 - это 0x20</span></span>
<span class="line"><span style="color:#6A737D;">-- minRepInt - INT, минимальный интервал отправки в сек</span></span>
<span class="line"><span style="color:#6A737D;">-- maxRepInt - INT, максимальный интервал отправки в сек</span></span>
<span class="line"><span style="color:#6A737D;">-- repChange - INT, минимальное значение, на которое должен измениться атрибут, для репортинга</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">configReport</span><span style="color:#24292E;">(device, epId, clusterId, AttrId, dataType, minRepInt, maxRepInt, repChange)</span></span>
<span class="line"><span style="color:#6A737D;">-- device - STR, FriendlyName, ieeeAddr или nwkAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- epID - INT, номер эндпоинта</span></span>
<span class="line"><span style="color:#6A737D;">-- clusterID - INT, номер кластера. Например GEN_POWER_CFG - это 0x0001</span></span>
<span class="line"><span style="color:#6A737D;">-- AttrId - INT, номер атрибута. Например BatteryVoltage - это 0x0020</span></span>
<span class="line"><span style="color:#6A737D;">-- dataType - INT, тип данных. Например UINT8 - это 0x20</span></span>
<span class="line"><span style="color:#6A737D;">-- minRepInt - INT, минимальный интервал отправки в сек</span></span>
<span class="line"><span style="color:#6A737D;">-- maxRepInt - INT, максимальный интервал отправки в сек</span></span>
<span class="line"><span style="color:#6A737D;">-- repChange - INT, минимальное значение, на которое должен измениться атрибут, для репортинга</span></span></code></pre></div><p>Например:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">configReport</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0x90FD9FFFFEF7E26D&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x0001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x0021</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1800</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3600</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x90FD9FFFFEF7E26D - ieeeAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- 1 - первый эндпоинт</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x0001 - кластер GEN_POWER_CFG</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x0021 - атрибут BatteryPercentageRemaining</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x20 - тип данных UINT8</span></span>
<span class="line"><span style="color:#6A737D;">-- 1800, 3600, 1 - репортить от 30 мин до 1 часа при изменении атрибута на 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">configReport</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0x90FD9FFFFEF7E26D&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x0001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x0021</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1800</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3600</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x90FD9FFFFEF7E26D - ieeeAddr устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- 1 - первый эндпоинт</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x0001 - кластер GEN_POWER_CFG</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x0021 - атрибут BatteryPercentageRemaining</span></span>
<span class="line"><span style="color:#6A737D;">-- 0x20 - тип данных UINT8</span></span>
<span class="line"><span style="color:#6A737D;">-- 1800, 3600, 1 - репортить от 30 мин до 1 часа при изменении атрибута на 1</span></span></code></pre></div><hr><h3 id="библиотека-mqtt" tabindex="-1">Библиотека MQTT <a class="header-anchor" href="#библиотека-mqtt" aria-label="Permalink to &quot;Библиотека MQTT&quot;">​</a></h3><h4 id="mqtt-prefix" tabindex="-1">mqtt.prefix() <a class="header-anchor" href="#mqtt-prefix" aria-label="Permalink to &quot;mqtt.prefix()&quot;">​</a></h4><p>Получает или задает системный префикс, настроенный в меню <code>Settigs</code> -&gt; <code>Link</code> -&gt; <code>MQTT Setup</code>, поле <code>System prefix topic</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;">([topic])</span></span>
<span class="line"><span style="color:#6A737D;">-- topic - STR, System prefix topic</span></span>
<span class="line"><span style="color:#6A737D;">--</span></span>
<span class="line"><span style="color:#6A737D;">-- Получить префикс</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> mqtt_prifix </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mqtt.</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- Задать префикс</span></span>
<span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">prefix</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;newTopic&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;">([topic])</span></span>
<span class="line"><span style="color:#6A737D;">-- topic - STR, System prefix topic</span></span>
<span class="line"><span style="color:#6A737D;">--</span></span>
<span class="line"><span style="color:#6A737D;">-- Получить префикс</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> mqtt_prifix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mqtt.</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- Задать префикс</span></span>
<span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">prefix</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;newTopic&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="mqtt-pub" tabindex="-1">mqtt.pub() <a class="header-anchor" href="#mqtt-pub" aria-label="Permalink to &quot;mqtt.pub()&quot;">​</a></h4><p>Публикует на MQTT сервер в топик <em>topic</em> значение <em>payload</em>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">pub</span><span style="color:#E1E4E8;">(topic, payload)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">pub</span><span style="color:#24292E;">(topic, payload)</span></span></code></pre></div><p>Пример управления реле на прошивке Tasmota - <code>cmnd/имя устройства/имя реле</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">pub</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cmnd/sonoff5/power&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;toggle&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">pub</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cmnd/sonoff5/power&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;toggle&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="mqtt-connected" tabindex="-1">mqtt.connected() <a class="header-anchor" href="#mqtt-connected" aria-label="Permalink to &quot;mqtt.connected()&quot;">​</a></h4><p>Возвращает статус подключение к брокеру MQTT. Выполняется без параметров.</p><h4 id="mqtt-sub" tabindex="-1">mqtt.sub() <a class="header-anchor" href="#mqtt-sub" aria-label="Permalink to &quot;mqtt.sub()&quot;">​</a></h4><p>Подписывается на топик и помещает полученные значения в объект. Можно вызывать повторно с другим именем объекта, для его изменения.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">sub</span><span style="color:#E1E4E8;">(topic, objName)</span></span>
<span class="line"><span style="color:#6A737D;">-- topic - STR, топик MQTT</span></span>
<span class="line"><span style="color:#6A737D;">-- objName - STR, объект, в который записываются данные</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">sub</span><span style="color:#24292E;">(topic, objName)</span></span>
<span class="line"><span style="color:#6A737D;">-- topic - STR, топик MQTT</span></span>
<span class="line"><span style="color:#6A737D;">-- objName - STR, объект, в который записываются данные</span></span></code></pre></div><p>Пример подписки на топик с температурой, которую шлюз помещает в объект:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">sub</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dev/sensor/temp&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;room_temp&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">sub</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dev/sensor/temp&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;room_temp&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="mqtt-unsub" tabindex="-1">mqtt.unSub() <a class="header-anchor" href="#mqtt-unsub" aria-label="Permalink to &quot;mqtt.unSub()&quot;">​</a></h4><p>Отписывается от топика.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">unSub</span><span style="color:#E1E4E8;">(topic)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">unSub</span><span style="color:#24292E;">(topic)</span></span></code></pre></div><p>Пример отписки от топика с температурой</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mqtt.</span><span style="color:#79B8FF;">unSub</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dev/sensor/temp&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mqtt.</span><span style="color:#005CC5;">unSub</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dev/sensor/temp&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><hr><h3 id="библиотека-http" tabindex="-1">Библиотека HTTP <a class="header-anchor" href="#библиотека-http" aria-label="Permalink to &quot;Библиотека HTTP&quot;">​</a></h3><h4 id="http-request2" tabindex="-1">http.request2() <a class="header-anchor" href="#http-request2" aria-label="Permalink to &quot;http.request2()&quot;">​</a></h4><p>Служит для отправки HTTP (HTTPS в разработке) запросов во внешние системы. Поддерживает методы GET и POST.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#79B8FF;">request2</span><span style="color:#E1E4E8;"> (url[:</span><span style="color:#B392F0;">port</span><span style="color:#E1E4E8;">], [method, headers, body])</span></span>
<span class="line"><span style="color:#6A737D;">-- url:port - STR, URL адрес и порт целевого ресурса</span></span>
<span class="line"><span style="color:#6A737D;">-- method - STR, метод POST или GET</span></span>
<span class="line"><span style="color:#6A737D;">-- headers - STR, заголовки запроса</span></span>
<span class="line"><span style="color:#6A737D;">-- body - STR, тело запроса</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http.</span><span style="color:#005CC5;">request2</span><span style="color:#24292E;"> (url[:</span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">], [method, headers, body])</span></span>
<span class="line"><span style="color:#6A737D;">-- url:port - STR, URL адрес и порт целевого ресурса</span></span>
<span class="line"><span style="color:#6A737D;">-- method - STR, метод POST или GET</span></span>
<span class="line"><span style="color:#6A737D;">-- headers - STR, заголовки запроса</span></span>
<span class="line"><span style="color:#6A737D;">-- body - STR, тело запроса</span></span></code></pre></div><p><a href="/samples#HTTP-запросы">Примеры</a></p><h4 id="http-request-deprecated" tabindex="-1">http.request() - deprecated <a class="header-anchor" href="#http-request-deprecated" aria-label="Permalink to &quot;http.request() - deprecated&quot;">​</a></h4><hr><h3 id="библиотека-telegram" tabindex="-1">Библиотека TELEGRAM <a class="header-anchor" href="#библиотека-telegram" aria-label="Permalink to &quot;Библиотека TELEGRAM&quot;">​</a></h3><p><a href="/telegram">Подробное описание здесь</a></p><h4 id="telegram-settoken" tabindex="-1">telegram.settoken() <a class="header-anchor" href="#telegram-settoken" aria-label="Permalink to &quot;telegram.settoken()&quot;">​</a></h4><p>Инициализирует токен</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">settoken</span><span style="color:#E1E4E8;">(token)</span></span>
<span class="line"><span style="color:#6A737D;">-- token - STR, API-токен вашего бота</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">settoken</span><span style="color:#24292E;">(token)</span></span>
<span class="line"><span style="color:#6A737D;">-- token - STR, API-токен вашего бота</span></span></code></pre></div><h4 id="telegram-setchat" tabindex="-1">telegram.setchat() <a class="header-anchor" href="#telegram-setchat" aria-label="Permalink to &quot;telegram.setchat()&quot;">​</a></h4><p>Инициализирует чат, в который бот будет отправлять уведомления</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">setchat</span><span style="color:#E1E4E8;">(chatid)</span></span>
<span class="line"><span style="color:#6A737D;">-- chatid - STR, ID чата, куда бот будет писать сообщения</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">setchat</span><span style="color:#24292E;">(chatid)</span></span>
<span class="line"><span style="color:#6A737D;">-- chatid - STR, ID чата, куда бот будет писать сообщения</span></span></code></pre></div><h4 id="telegram-secure" tabindex="-1">telegram.secure() <a class="header-anchor" href="#telegram-secure" aria-label="Permalink to &quot;telegram.secure()&quot;">​</a></h4><p>Инициализирует протокол HTTPS. <strong>Внимание! Включение этой опции отнимает большое количество свободной памяти! Возможны частые перезагрузки шлюза!</strong></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">secure</span><span style="color:#E1E4E8;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить: true, выключить (по-умолчанию): false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">secure</span><span style="color:#24292E;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить: true, выключить (по-умолчанию): false</span></span></code></pre></div><h4 id="telegram-receive" tabindex="-1">telegram.receive() <a class="header-anchor" href="#telegram-receive" aria-label="Permalink to &quot;telegram.receive()&quot;">​</a></h4><p>Инициализирует обработку входящих сообщений</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">receive</span><span style="color:#E1E4E8;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить: true, выключить (по-умолчанию): false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">receive</span><span style="color:#24292E;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить: true, выключить (по-умолчанию): false</span></span></code></pre></div><h4 id="telegram-send" tabindex="-1">telegram.send() <a class="header-anchor" href="#telegram-send" aria-label="Permalink to &quot;telegram.send()&quot;">​</a></h4><p>Отправляет сообщение.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telegram.</span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">(msg[, chatid, parse_mode])</span></span>
<span class="line"><span style="color:#6A737D;">-- msg - STR, сообщение</span></span>
<span class="line"><span style="color:#6A737D;">-- chatid - STR, ID чата, куда бот будет писать сообщения</span></span>
<span class="line"><span style="color:#6A737D;">-- parse_mode - STR, можно использовать для отправки ReplyKeyboard</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telegram.</span><span style="color:#005CC5;">send</span><span style="color:#24292E;">(msg[, chatid, parse_mode])</span></span>
<span class="line"><span style="color:#6A737D;">-- msg - STR, сообщение</span></span>
<span class="line"><span style="color:#6A737D;">-- chatid - STR, ID чата, куда бот будет писать сообщения</span></span>
<span class="line"><span style="color:#6A737D;">-- parse_mode - STR, можно использовать для отправки ReplyKeyboard</span></span></code></pre></div><hr><h3 id="библиотека-os" tabindex="-1">Библиотека OS <a class="header-anchor" href="#библиотека-os" aria-label="Permalink to &quot;Библиотека OS&quot;">​</a></h3><p><a href="/samples#Библиотека-OS">Примеры</a></p><h4 id="os-time" tabindex="-1">os.time() <a class="header-anchor" href="#os-time" aria-label="Permalink to &quot;os.time()&quot;">​</a></h4><p>Возвращает Unix время. Вызывается без параметров.</p><h4 id="os-sunrise-offset" tabindex="-1">os.sunrise([offset]) <a class="header-anchor" href="#os-sunrise-offset" aria-label="Permalink to &quot;os.sunrise([offset])&quot;">​</a></h4><p>Возвращает время восхода солнца (часы, минуты). Для правильной работы требуется выполнить настройки <em>Settings -&gt; Time &amp; Location</em></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">sunrise</span><span style="color:#E1E4E8;">([offset])</span></span>
<span class="line"><span style="color:#6A737D;">-- offset - INT, позволяет добавить смещение в минутах к результату вывода</span></span>
<span class="line"><span style="color:#6A737D;">-- Пример:</span></span>
<span class="line"><span style="color:#E1E4E8;">sunriseH, sunriseM </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">sunrise</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Восход солнца в &quot; </span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;"> sunriseH </span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot; </span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;"> sunriseM )</span></span>
<span class="line"><span style="color:#6A737D;">--&gt;  Восход солнца в 10:55</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">sunrise</span><span style="color:#24292E;">([offset])</span></span>
<span class="line"><span style="color:#6A737D;">-- offset - INT, позволяет добавить смещение в минутах к результату вывода</span></span>
<span class="line"><span style="color:#6A737D;">-- Пример:</span></span>
<span class="line"><span style="color:#24292E;">sunriseH, sunriseM </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">sunrise</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Восход солнца в &quot; </span><span style="color:#D73A49;">..</span><span style="color:#24292E;"> sunriseH </span><span style="color:#D73A49;">..</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot; </span><span style="color:#D73A49;">..</span><span style="color:#24292E;"> sunriseM )</span></span>
<span class="line"><span style="color:#6A737D;">--&gt;  Восход солнца в 10:55</span></span></code></pre></div><h4 id="os-sunset-offset" tabindex="-1">os.sunset([offset]) <a class="header-anchor" href="#os-sunset-offset" aria-label="Permalink to &quot;os.sunset([offset])&quot;">​</a></h4><p>Возвращает время заката солнца (часы, минуты). Для правильной работы требуется выполнить настройки <em>Settings -&gt; Time &amp; Location</em></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">sunset</span><span style="color:#E1E4E8;">([offset])</span></span>
<span class="line"><span style="color:#6A737D;">-- offset - INT, позволяет добавить смещение в минутах к результату вывода</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">sunset</span><span style="color:#24292E;">([offset])</span></span>
<span class="line"><span style="color:#6A737D;">-- offset - INT, позволяет добавить смещение в минутах к результату вывода</span></span></code></pre></div><h4 id="os-setsleep" tabindex="-1">os.setSleep() <a class="header-anchor" href="#os-setsleep" aria-label="Permalink to &quot;os.setSleep()&quot;">​</a></h4><p>Включает и выключает режим сна для модема WiFi. По-умолчанию выключено. Также можно заставить систему заснуть глубоким сном на <code>time</code> секунд, тем самым снизив энергопотребление практически до нуля. В этом режиме не работает ничего, кроме таймера отсчета до окончания сна, по прошествии которого система перезагрузится. Это может использоваться при питании от аккумулятора.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">setSleep</span><span style="color:#E1E4E8;">(enable[,time])</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить = true, выключить = false спящий режим</span></span>
<span class="line"><span style="color:#6A737D;">-- time - INT, время сна в сек.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">setSleep</span><span style="color:#24292E;">(enable[,time])</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить = true, выключить = false спящий режим</span></span>
<span class="line"><span style="color:#6A737D;">-- time - INT, время сна в сек.</span></span></code></pre></div><h4 id="os-delay" tabindex="-1">os.delay() <a class="header-anchor" href="#os-delay" aria-label="Permalink to &quot;os.delay()&quot;">​</a></h4><p>Выполняет паузу выполнения скрипта на указанное время. Не рекомендуется делать паузу более чем на 1 секунду.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">delay</span><span style="color:#E1E4E8;">(time)</span></span>
<span class="line"><span style="color:#6A737D;">-- time - INT, время паузы в милисекундах (1 сек = 1000 мс)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">delay</span><span style="color:#24292E;">(time)</span></span>
<span class="line"><span style="color:#6A737D;">-- time - INT, время паузы в милисекундах (1 сек = 1000 мс)</span></span></code></pre></div><h4 id="os-millis" tabindex="-1">os.millis() <a class="header-anchor" href="#os-millis" aria-label="Permalink to &quot;os.millis()&quot;">​</a></h4><p>Возвращает количество миллисекунд с момента загрузки системы. Вызывается без параметров.</p><h4 id="os-getuptime" tabindex="-1">os.getUptime() <a class="header-anchor" href="#os-getuptime" aria-label="Permalink to &quot;os.getUptime()&quot;">​</a></h4><p>Возвращает время с момента загрузки системы. Вызывается без параметров.</p><p>Пример:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Uptime: &#39; </span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">getUptime</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#6A737D;">--&gt; Uptime: 11 days 17:43:03</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Uptime: &#39; </span><span style="color:#D73A49;">..</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">getUptime</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#6A737D;">--&gt; Uptime: 11 days 17:43:03</span></span></code></pre></div><h4 id="os-ntp" tabindex="-1">os.ntp() <a class="header-anchor" href="#os-ntp" aria-label="Permalink to &quot;os.ntp()&quot;">​</a></h4><p>Возвращает статус подключения к серверу времени (NTP): <code>true</code> - синхронизация с сервером NTP выполнена успешно.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">ntp</span><span style="color:#E1E4E8;">([server])</span></span>
<span class="line"><span style="color:#6A737D;">-- server - STR, адрес сервера NTP</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">ntp</span><span style="color:#24292E;">([server])</span></span>
<span class="line"><span style="color:#6A737D;">-- server - STR, адрес сервера NTP</span></span></code></pre></div><p>Пример лога</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[11:01:50.374] [Time] Get time from NTP: pool.ntp.org, use TimeZone: UTC+5:00</span></span>
<span class="line"><span style="color:#e1e4e8;">[11:01:52.422] [Time] NTP Updated! UnixTime: 1698300112, time: 26.10.2023 11:01:52, ms: 45</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[11:01:50.374] [Time] Get time from NTP: pool.ntp.org, use TimeZone: UTC+5:00</span></span>
<span class="line"><span style="color:#24292e;">[11:01:52.422] [Time] NTP Updated! UnixTime: 1698300112, time: 26.10.2023 11:01:52, ms: 45</span></span></code></pre></div><h4 id="os-freemem" tabindex="-1">os.freeMem() <a class="header-anchor" href="#os-freemem" aria-label="Permalink to &quot;os.freeMem()&quot;">​</a></h4><p>Возвращает количество свободной памяти в байтах.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">freeMem</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#6A737D;">-- type - STR, heap, psram</span></span>
<span class="line"><span style="color:#6A737D;">-- без параметров возвращает объем FreeHeap</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">freeMem</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">type</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#6A737D;">-- type - STR, heap, psram</span></span>
<span class="line"><span style="color:#6A737D;">-- без параметров возвращает объем FreeHeap</span></span></code></pre></div><h4 id="os-save" tabindex="-1">os.save() <a class="header-anchor" href="#os-save" aria-label="Permalink to &quot;os.save()&quot;">​</a></h4><p>Сохраняет данные. Тоже, что и меню <em>Actions -&gt; Save</em>. Вызывается без параметров.</p><h4 id="os-restart" tabindex="-1">os.restart() <a class="header-anchor" href="#os-restart" aria-label="Permalink to &quot;os.restart()&quot;">​</a></h4><p>Перезагружает ОС. Вызывается без параметров.</p><h4 id="os-ping" tabindex="-1">os.ping() <a class="header-anchor" href="#os-ping" aria-label="Permalink to &quot;os.ping()&quot;">​</a></h4><p>Отправляет запросы ICMP PING на тестируемый хост. Возвращает среднее время ответа или -1 при недоступности.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">ping</span><span style="color:#E1E4E8;">(host[, count])</span></span>
<span class="line"><span style="color:#6A737D;">-- host - STR, IP или DNS адрес хоста</span></span>
<span class="line"><span style="color:#6A737D;">-- count - INT, количество запрсов (по-умолчанию 1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">ping</span><span style="color:#24292E;">(host[, count])</span></span>
<span class="line"><span style="color:#6A737D;">-- host - STR, IP или DNS адрес хоста</span></span>
<span class="line"><span style="color:#6A737D;">-- count - INT, количество запрсов (по-умолчанию 1)</span></span></code></pre></div><h4 id="os-wdt" tabindex="-1">os.wdt() <a class="header-anchor" href="#os-wdt" aria-label="Permalink to &quot;os.wdt()&quot;">​</a></h4><p>Включается и выключает WDT (Сторожевой таймер), может использоваться для отладки незапланированных перезагрузок.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">wdt</span><span style="color:#E1E4E8;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить (true), выключить (false)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">wdt</span><span style="color:#24292E;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить (true), выключить (false)</span></span></code></pre></div><h4 id="os-udplogenable" tabindex="-1">os.udplogenable() <a class="header-anchor" href="#os-udplogenable" aria-label="Permalink to &quot;os.udplogenable()&quot;">​</a></h4><p>Включает логирование через UDP. <a href="/faq#включение-udp-log">Примеры получения лога</a></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">udplogenable</span><span style="color:#E1E4E8;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить UDP лог (true); выключить (false)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">udplogenable</span><span style="color:#24292E;">(enable)</span></span>
<span class="line"><span style="color:#6A737D;">-- enable - BOOL, включить UDP лог (true); выключить (false)</span></span></code></pre></div><h4 id="os-setassets" tabindex="-1">os.setAssets() <a class="header-anchor" href="#os-setassets" aria-label="Permalink to &quot;os.setAssets()&quot;">​</a></h4><p>Задает место хранения ресурсов web-интерфейса, для размещения на альтернативном web-сервере, например локальном. В разработке хранение web-ресурсов в хранилище SLS, для систем без выхода в интернет.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">setAssets</span><span style="color:#E1E4E8;">(url)</span></span>
<span class="line"><span style="color:#6A737D;">-- url - STR, источник ресурсов</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">setAssets</span><span style="color:#24292E;">(url)</span></span>
<span class="line"><span style="color:#6A737D;">-- url - STR, источник ресурсов</span></span></code></pre></div><h4 id="os-led" tabindex="-1">os.led() <a class="header-anchor" href="#os-led" aria-label="Permalink to &quot;os.led()&quot;">​</a></h4><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">led</span><span style="color:#E1E4E8;">(mode, brightness, r, g, b[, effect])</span></span>
<span class="line"><span style="color:#6A737D;">-- mode - STR, режим. OFF - выключено, ON - включено, AUTO - индикация режимов/состояний шлюза (см. описаниее далее)</span></span>
<span class="line"><span style="color:#6A737D;">-- brightness - INT, яркость (целое, от 0 до 255)</span></span>
<span class="line"><span style="color:#6A737D;">-- r, g, b - INT, цвет (целое, от 0 до 255 или -1, если цвет менять не требуется)</span></span>
<span class="line"><span style="color:#6A737D;">-- effect - INT, включает эффекты в соответствии с таблицей</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">led</span><span style="color:#24292E;">(mode, brightness, r, g, b[, effect])</span></span>
<span class="line"><span style="color:#6A737D;">-- mode - STR, режим. OFF - выключено, ON - включено, AUTO - индикация режимов/состояний шлюза (см. описаниее далее)</span></span>
<span class="line"><span style="color:#6A737D;">-- brightness - INT, яркость (целое, от 0 до 255)</span></span>
<span class="line"><span style="color:#6A737D;">-- r, g, b - INT, цвет (целое, от 0 до 255 или -1, если цвет менять не требуется)</span></span>
<span class="line"><span style="color:#6A737D;">-- effect - INT, включает эффекты в соответствии с таблицей</span></span></code></pre></div><p>Подробнее о работе с LED <a href="/led_control">здесь</a></p><h4 id="os-функции-для-работы-с-хранилищем" tabindex="-1">os. функции для работы с хранилищем <a class="header-anchor" href="#os-функции-для-работы-с-хранилищем" aria-label="Permalink to &quot;os. функции для работы с хранилищем&quot;">​</a></h4><p>Описание функций для работы с хранилищем <a href="/storage#скрипты-lua">здесь</a></p><hr><h3 id="библиотека-gpio" tabindex="-1">Библиотека GPIO <a class="header-anchor" href="#библиотека-gpio" aria-label="Permalink to &quot;Библиотека GPIO&quot;">​</a></h3><p>Управление контактами ввода/вывода (GPIO) чипа ESP32.</p><h4 id="gpio-mode" tabindex="-1">gpio.mode() <a class="header-anchor" href="#gpio-mode" aria-label="Permalink to &quot;gpio.mode()&quot;">​</a></h4><p>Управление режимом контакта:</p><ul><li>gpio.INPUT: ввод</li><li>gpio.OUTPUT: вывод</li><li>gpio.INPUT_PULLUP: подтянуть к VCC</li><li>gpio.INPUT_PULLDOWN: подтянуть к GND</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">mode</span><span style="color:#E1E4E8;">(pin, mode)</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- mode: режим контакта - gpio.INPUT, gpio.INPUT_PULLUP, gpio.INPUT_PULLDOWN, gpio.OUTPUT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">mode</span><span style="color:#24292E;">(pin, mode)</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- mode: режим контакта - gpio.INPUT, gpio.INPUT_PULLUP, gpio.INPUT_PULLDOWN, gpio.OUTPUT</span></span></code></pre></div><h4 id="gpio-read" tabindex="-1">gpio.read() <a class="header-anchor" href="#gpio-read" aria-label="Permalink to &quot;gpio.read()&quot;">​</a></h4><p>Чтение сигнала с GPIO</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;">(pin[, ADC)</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- ADC: true - чтение ADC; false - чтение цифрового сигнала</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">read</span><span style="color:#24292E;">(pin[, ADC)</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- ADC: true - чтение ADC; false - чтение цифрового сигнала</span></span></code></pre></div><p>Задать каналу 2 режим входа, получить его значение:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">mode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">, gpio.</span><span style="color:#B392F0;">INPUT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gpio.</span><span style="color:#79B8FF;">read</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">mode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, gpio.</span><span style="color:#6F42C1;">INPUT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gpio.</span><span style="color:#005CC5;">read</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(value)</span></span></code></pre></div><h4 id="gpio-write" tabindex="-1">gpio.write() <a class="header-anchor" href="#gpio-write" aria-label="Permalink to &quot;gpio.write()&quot;">​</a></h4><p>Запись уровня в GPIO</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">write</span><span style="color:#E1E4E8;">(pin, level)</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- level: уровень - gpio.HIGH - высокий, gpio.LOW - низкий</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">write</span><span style="color:#24292E;">(pin, level)</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- level: уровень - gpio.HIGH - высокий, gpio.LOW - низкий</span></span></code></pre></div><p>Например, задать каналу 4 режим выхода и включить его на 100мс:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">mode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">, gpio.</span><span style="color:#B392F0;">OUTPUT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">os.</span><span style="color:#79B8FF;">delay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">mode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">27</span><span style="color:#24292E;">, gpio.</span><span style="color:#6F42C1;">OUTPUT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">27</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">os.</span><span style="color:#005CC5;">delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">27</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="pwm-шим" tabindex="-1">PWM (ШИМ) <a class="header-anchor" href="#pwm-шим" aria-label="Permalink to &quot;PWM (ШИМ)&quot;">​</a></h3><p>ШИМ-контроллер ESP32 имеет 16 независимых каналов, которые можно настроить для генерации ШИМ-сигналов с различными свойствами. Все выводы, которые могут выступать в качестве выходов, могут использоваться в качестве выводов ШИМ (GPIO с 34 по 39 не могут генерировать ШИМ).</p><h4 id="gpio-pwmsetup" tabindex="-1">gpio.pwmSetup() <a class="header-anchor" href="#gpio-pwmsetup" aria-label="Permalink to &quot;gpio.pwmSetup()&quot;">​</a></h4><p>Настройка ШИМ</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">pwmSetup</span><span style="color:#E1E4E8;">(channel, pin[, freq </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">[, resolution </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]])</span></span>
<span class="line"><span style="color:#6A737D;">-- chanel: канал ШИМ - 0-15</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- resolution: разрешение 1-16 bits</span></span>
<span class="line"><span style="color:#6A737D;">-- freq: частота</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">pwmSetup</span><span style="color:#24292E;">(channel, pin[, freq </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">[, resolution </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]])</span></span>
<span class="line"><span style="color:#6A737D;">-- chanel: канал ШИМ - 0-15</span></span>
<span class="line"><span style="color:#6A737D;">-- pin: номер контакта</span></span>
<span class="line"><span style="color:#6A737D;">-- resolution: разрешение 1-16 bits</span></span>
<span class="line"><span style="color:#6A737D;">-- freq: частота</span></span></code></pre></div><h4 id="gpio-pwm" tabindex="-1">gpio.pwm() <a class="header-anchor" href="#gpio-pwm" aria-label="Permalink to &quot;gpio.pwm()&quot;">​</a></h4><p>Управление ШИМ</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">pwm</span><span style="color:#E1E4E8;">(channel, value)</span></span>
<span class="line"><span style="color:#6A737D;">-- channel: канал 0-15</span></span>
<span class="line"><span style="color:#6A737D;">-- value: значение ШИМ</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">pwm</span><span style="color:#24292E;">(channel, value)</span></span>
<span class="line"><span style="color:#6A737D;">-- channel: канал 0-15</span></span>
<span class="line"><span style="color:#6A737D;">-- value: значение ШИМ</span></span></code></pre></div><p>Например, задать каналу 1 режим выхода и включить ШИМ со скважностью 50%</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">pwmSetup</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">gpio.</span><span style="color:#79B8FF;">pwm</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">255</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">pwmSetup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">gpio.</span><span style="color:#005CC5;">pwm</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">255</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)</span></span></code></pre></div><hr><h3 id="библиотека-audio" tabindex="-1">Библиотека AUDIO <a class="header-anchor" href="#библиотека-audio" aria-label="Permalink to &quot;Библиотека AUDIO&quot;">​</a></h3><p>Управление звуком</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">audio.</span><span style="color:#79B8FF;">playurl</span><span style="color:#E1E4E8;">(url) </span><span style="color:#6A737D;">-- проигрывание звука из URL</span></span>
<span class="line"><span style="color:#E1E4E8;">audio.</span><span style="color:#79B8FF;">geturl</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">-- возвращает текущий URL</span></span>
<span class="line"><span style="color:#E1E4E8;">audio.</span><span style="color:#79B8FF;">stop</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">-- остановить проигрывание</span></span>
<span class="line"><span style="color:#E1E4E8;">audio.</span><span style="color:#79B8FF;">setvolume</span><span style="color:#E1E4E8;">(volume_percent) </span><span style="color:#6A737D;">-- установить уровень громкости</span></span>
<span class="line"><span style="color:#E1E4E8;">audio.</span><span style="color:#79B8FF;">getvolume</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">-- возвращает текущий уровень громкости</span></span>
<span class="line"><span style="color:#E1E4E8;">audio.</span><span style="color:#79B8FF;">getstatus</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">-- возвращает текущий статус</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">audio.</span><span style="color:#005CC5;">playurl</span><span style="color:#24292E;">(url) </span><span style="color:#6A737D;">-- проигрывание звука из URL</span></span>
<span class="line"><span style="color:#24292E;">audio.</span><span style="color:#005CC5;">geturl</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">-- возвращает текущий URL</span></span>
<span class="line"><span style="color:#24292E;">audio.</span><span style="color:#005CC5;">stop</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">-- остановить проигрывание</span></span>
<span class="line"><span style="color:#24292E;">audio.</span><span style="color:#005CC5;">setvolume</span><span style="color:#24292E;">(volume_percent) </span><span style="color:#6A737D;">-- установить уровень громкости</span></span>
<span class="line"><span style="color:#24292E;">audio.</span><span style="color:#005CC5;">getvolume</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">-- возвращает текущий уровень громкости</span></span>
<span class="line"><span style="color:#24292E;">audio.</span><span style="color:#005CC5;">getstatus</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">-- возвращает текущий статус</span></span></code></pre></div><hr><h3 id="библиотека-net" tabindex="-1">Библиотека NET <a class="header-anchor" href="#библиотека-net" aria-label="Permalink to &quot;Библиотека NET&quot;">​</a></h3><h4 id="net-localip" tabindex="-1">net.localIP() <a class="header-anchor" href="#net-localip" aria-label="Permalink to &quot;net.localIP()&quot;">​</a></h4><p>Возвращает адрес устройства SLS в локальной сети. Выполняется без параметров.</p><h4 id="net-remoteip" tabindex="-1">net.remoteIP() <a class="header-anchor" href="#net-remoteip" aria-label="Permalink to &quot;net.remoteIP()&quot;">​</a></h4><p>Возвращает внешний адрес SLS в сети интернет (если доступен). Выполняется без параметров.</p><hr><h3 id="библиотека-yeelight" tabindex="-1">Библиотека Yeelight <a class="header-anchor" href="#библиотека-yeelight" aria-label="Permalink to &quot;Библиотека Yeelight&quot;">​</a></h3><p><a href="/samples#библиотека-yeelight">Примеры</a></p><h4 id="yeelight-send" tabindex="-1">yeelight.send() <a class="header-anchor" href="#yeelight-send" aria-label="Permalink to &quot;yeelight.send()&quot;">​</a></h4><p>Управляет устройством Yeelight. <a href="https://www.yeelight.com/download/Yeelight_Inter-Operation_Spec.pdf" target="_blank" rel="noreferrer">Описание протокола</a>.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> yeelight.</span><span style="color:#79B8FF;">send</span><span style="color:#E1E4E8;">(id, method, param)</span></span>
<span class="line"><span style="color:#6A737D;">-- id - STR, IP адрес устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- method - STR, команда</span></span>
<span class="line"><span style="color:#6A737D;">-- param - STR, параметры команды</span></span>
<span class="line"><span style="color:#6A737D;">-- result - JSON строка, согласно описания протокола</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> yeelight.</span><span style="color:#005CC5;">send</span><span style="color:#24292E;">(id, method, param)</span></span>
<span class="line"><span style="color:#6A737D;">-- id - STR, IP адрес устройства</span></span>
<span class="line"><span style="color:#6A737D;">-- method - STR, команда</span></span>
<span class="line"><span style="color:#6A737D;">-- param - STR, параметры команды</span></span>
<span class="line"><span style="color:#6A737D;">-- result - JSON строка, согласно описания протокола</span></span></code></pre></div><hr><h3 id="библиотека-cloud" tabindex="-1">Библиотека Cloud <a class="header-anchor" href="#библиотека-cloud" aria-label="Permalink to &quot;Библиотека Cloud&quot;">​</a></h3><h4 id="cloud-isconnected" tabindex="-1">cloud.isConnected() <a class="header-anchor" href="#cloud-isconnected" aria-label="Permalink to &quot;cloud.isConnected()&quot;">​</a></h4><p>Возвращает статус подключения к облаку SLS <code>cloud.slsys.io</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cloud.</span><span style="color:#79B8FF;">isConnected</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- result - BOOL, true шлюз подключен к облаку SLS</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cloud.</span><span style="color:#005CC5;">isConnected</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">-- result - BOOL, true шлюз подключен к облаку SLS</span></span></code></pre></div><hr><h2 id="функции-lua-sls" tabindex="-1">Функции LUA SLS <a class="header-anchor" href="#функции-lua-sls" aria-label="Permalink to &quot;Функции LUA SLS&quot;">​</a></h2><p>Функции LUA, встроенные в прошивку SLS, которые не объединены той или иной библиотекой.</p><h3 id="explode" tabindex="-1">explode() <a class="header-anchor" href="#explode" aria-label="Permalink to &quot;explode()&quot;">​</a></h3><p>Разбивает строку с помощью разделителя. Результат помещает в таблицу.</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">explode</span><span style="color:#E1E4E8;">(separator, string)</span></span>
<span class="line"><span style="color:#6A737D;">-- string - STR, строка, которую необходимо разбить</span></span>
<span class="line"><span style="color:#6A737D;">-- separator - STR, символ разделителя</span></span>
<span class="line"><span style="color:#6A737D;">-- пример:</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> string </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;param1|param2|param3&quot;</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">explode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;">, string)</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> param1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> param2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">local</span><span style="color:#E1E4E8;"> param3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">explode</span><span style="color:#24292E;">(separator, string)</span></span>
<span class="line"><span style="color:#6A737D;">-- string - STR, строка, которую необходимо разбить</span></span>
<span class="line"><span style="color:#6A737D;">-- separator - STR, символ разделителя</span></span>
<span class="line"><span style="color:#6A737D;">-- пример:</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> string </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;param1|param2|param3&quot;</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">explode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;|&quot;</span><span style="color:#24292E;">, string)</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> param1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> param2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;"> param3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre></div><hr><h2 id="обработка-нажатии-аппаратнои-кнопки-шлюза" tabindex="-1">Обработка нажатий аппаратной кнопки шлюза <a class="header-anchor" href="#обработка-нажатии-аппаратнои-кнопки-шлюза" aria-label="Permalink to &quot;Обработка нажатий аппаратной кнопки шлюза&quot;">​</a></h2><p>Многие ревизии шлюзов имеют кнопку, нажатия которой можно обрабатывать скриптами. Например, для включения &quot;режима сопряжения&quot; при нажатии на боковую кнопку шлюза Необходимо привязать скрипт <code>btn_sw1.lua</code></p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">zigbee.</span><span style="color:#79B8FF;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">255</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;0x0000&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">zigbee.</span><span style="color:#005CC5;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;0x0000&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>и привязать его выполнение в init.lua</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#79B8FF;">setScript</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;io.input0.value&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;btn_sw1.lua&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">obj.</span><span style="color:#005CC5;">setScript</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;io.input0.value&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;btn_sw1.lua&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li>где <code>io.input0.value</code> - номер обрататываемого порта (в примере указана кнопка для круглого шлюза)</li></ul><p>Более подробно вопрос с обрабокой событий gpio разобран в разделе <a href="/devices/din_mini_io_rus">Модуля ввода-вывода</a></p><hr><h2 id="полезные-ссылки" tabindex="-1">Полезные ссылки <a class="header-anchor" href="#полезные-ссылки" aria-label="Permalink to &quot;Полезные ссылки&quot;">​</a></h2><ol><li><a href="/samples">Примеры типовых сценариев</a></li><li>On-line учебник по <a href="https://zserge.wordpress.com/2012/02/23/lua-%D0%B7%D0%B0-60-%D0%BC%D0%B8%D0%BD%D1%83%D1%82/" target="_blank" rel="noreferrer">lua</a></li><li>Генератор lua скриптов на основе <a href="https://blockly-demo.appspot.com/static/demos/code/index.html" target="_blank" rel="noreferrer">Blockly</a></li></ol>`,289),r=[c];function i(d,y,E,u,h,g){return a(),n("div",null,r)}const m=s(t,[["render",i]]);export{F as __pageData,m as default};
