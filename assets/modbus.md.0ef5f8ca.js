import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.f1c0562b.js";const d=JSON.parse('{"title":"Шлюз ModBus","description":"","frontmatter":{},"headers":[],"relativePath":"modbus.md","filePath":"modbus.md"}'),o={name:"modbus.md"},p=l(`<h1 id="шлюз-modbus" tabindex="-1">Шлюз ModBus <a class="header-anchor" href="#шлюз-modbus" aria-label="Permalink to &quot;Шлюз ModBus&quot;">​</a></h1><p><strong>Функционал поддерживается только для <a href="/sls_pro">Pro</a> версии.</strong></p><p>Поддержка протоколов:</p><ul><li>Modbus TCP Slave (с версии 2021.05.26d6 регистры хранения (holdings))</li><li>Modbus TCP Master (в разработке)</li><li>Modbus RTU Master (в разработке)</li><li>Modbus RTU Slave (с версии 2021.05.26d6 регистры хранения (holdings))</li><li>Modbus RTUoverTCP Master (в разработке)</li><li>Modbus RTUoverTCP Slave (в разработке)</li></ul><h2 id="как-работает" tabindex="-1">Как работает <a class="header-anchor" href="#как-работает" aria-label="Permalink to &quot;Как работает&quot;">​</a></h2><p>Шлюз обеспечивает связь регистра Modbus с объектом в шлюзе, что позволяет обеспечить двухстороннюю передачу данных.</p><h2 id="modbus-master" tabindex="-1">Modbus Master <a class="header-anchor" href="#modbus-master" aria-label="Permalink to &quot;Modbus Master&quot;">​</a></h2><p>Запускается через команду: <em>mb.startMaster()</em></p><h2 id="tcp-slave" tabindex="-1">TCP Slave <a class="header-anchor" href="#tcp-slave" aria-label="Permalink to &quot;TCP Slave&quot;">​</a></h2><p>Запускается через команду: <em>mb.startTCPSlave()</em>. Используется стандартный TCP порт - 502.</p><h2 id="rtu-slave" tabindex="-1">RTU Slave <a class="header-anchor" href="#rtu-slave" aria-label="Permalink to &quot;RTU Slave&quot;">​</a></h2><p>Запускается через команду: <em>mb.startRTUSlave(SlaveId)</em>, где SlaveId - идентификатор в сети Modbus RTU. Настройка параметров Serial интерфейса произодится в соответстующем разделе.</p><h2 id="примеры" tabindex="-1">Примеры <a class="header-anchor" href="#примеры" aria-label="Permalink to &quot;Примеры&quot;">​</a></h2><p>Добавить в init.lua:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mb&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">mb.</span><span style="color:#79B8FF;">startTCPSlave</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">mb.</span><span style="color:#79B8FF;">addReg</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;room_temperature&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mb&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">mb.</span><span style="color:#005CC5;">startTCPSlave</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mb.</span><span style="color:#005CC5;">addReg</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;room_temperature&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span></code></pre></div><p>где:</p><p>1 - номер регистра</p><p>room_temperature - объект</p><p>100 - множитель к значению</p><p>Конвертация значения регистра 0/1 в OFF/ON для управления Zigbee-реле с обратной связью:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mb&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">--obj.onChange(&quot;relay1.state&quot;, &quot;relay1.lua&quot;)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> Event.</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">-- on state change</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">--local val = 0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Event.</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ON&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj.</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;relay1.state&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#F97583;">elseif</span><span style="color:#E1E4E8;"> Event.</span><span style="color:#B392F0;">Obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">-- on obj change</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Event.</span><span style="color:#B392F0;">Obj</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ON&quot; </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;OFF&quot; </span><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#E1E4E8;">  zigbee.</span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0x84FD27FFFECE981A&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;state&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mb&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">--obj.onChange(&quot;relay1.state&quot;, &quot;relay1.lua&quot;)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> Event.</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- on state change</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">--local val = 0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Event.</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ON&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#24292E;">  obj.</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;relay1.state&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#D73A49;">elseif</span><span style="color:#24292E;"> Event.</span><span style="color:#6F42C1;">Obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">-- on obj change</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Event.</span><span style="color:#6F42C1;">Obj</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ON&quot; </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;OFF&quot; </span><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#24292E;">  zigbee.</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0x84FD27FFFECE981A&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;state&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span></code></pre></div>`,21),e=[p];function t(r,c,E,y,i,u){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{d as __pageData,h as default};
